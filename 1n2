1.


import tkinter as tk
from tkinter import messagebox, simpledialog
import random

class MathGameGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Math Game")
        self.root.configure(bg='lightblue')
        self.root.geometry('300x300')
        self.score = 50
        self.create_widgets()

    def generate_question(self):
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        return num1, num2, num1 * num2

    def check_answer(self, answer, correct_answer, score_label):
        if answer is not None and str(answer).isdigit():
            answer = int(answer)
            if answer == correct_answer:
                messagebox.showinfo("Correct", "You are correct!")
                self.score += 5
            else:
                messagebox.showwarning("Incorrect", "Incorrect. Please try again.")
                self.score -= 5
            score_label.config(text=f"Score: {self.score}")
        else:
            messagebox.showwarning("Invalid Answer", "Please enter a valid numeric answer.")

    def play_game(self):
        if self.score > 0:
            num1, num2, correct_answer = self.generate_question()
            question_text = f"How much is {num1} times {num2}"

            dialog_window = tk.Toplevel(self.root)
            dialog_window.title("Math Game")
            dialog_window.geometry('300x300')
            dialog_window.configure(bg='lightblue')

            # Display the score in the dialog window
            score_label = tk.Label(dialog_window, text=f"Score: {self.score}", font=("Helvetica", 12))
            score_label.pack(pady=10)

            question_label = tk.Label(dialog_window, text=question_text, font=("Helvetica", 12))
            question_label.pack(pady=10)

            answer_entry = tk.Entry(dialog_window, font=("Helvetica", 12))
            answer_entry.pack(pady=10)

            answer = None

            def get_answer():
                nonlocal answer
                answer = answer_entry.get()
                self.check_answer(answer, correct_answer, score_label)
                dialog_window.destroy()

            # Enter Answer button to submit the answer
            enter_answer_button = tk.Button(dialog_window, text="Enter Answer", font=("Comic Sans MS", 12),
                                            command=get_answer)
            enter_answer_button.pack(pady=20)

            # Quit button to end the game
            quit_button = tk.Button(dialog_window, text="Quit", font=("Comic Sans MS", 12), command=dialog_window.destroy)
            quit_button.pack(pady=20)

            answer_entry.focus_set()
            dialog_window.wait_window(dialog_window)

            if answer is not None:
                self.play_game()
            else:
                self.end_game()

        else:
            messagebox.showinfo("Game Over", "Game over! Your final score is: {}".format(self.score))
            self.root.destroy()

    def end_game(self):
        user_confirm = messagebox.askyesno("Confirmation", "Are you sure you want to quit the game?")
        if user_confirm:
            messagebox.showinfo("Game Over", "Game over! Your final score is: {}".format(self.score))
            self.root.destroy()

    def create_widgets(self):
        # Create an empty Label for spacing
        space_label = tk.Label(self.root, text="", pady=10)
        space_label.pack()

        # Create a Label widget for the title
        title_label = tk.Label(self.root, text="MultiplyMania", font=("Comic Sans MS", 24), pady=10)
        title_label.pack()

        # Create a Button widget for the "Start Game" button
        start_button = tk.Button(self.root, text="Start Game", font=("Comic Sans MS", 15), command=self.play_game, width=10, height=2)
        start_button.pack(pady=20)

if __name__ == "__main__":
    root = tk.Tk()
    app = MathGameGUI(root)
    root.mainloop()

=====================================================================
2.


import tkinter as tk
from tkinter import messagebox

# Assuming you have a cartoon font installed, use its name
cartoon_font = ("Comic Sans MS", 12)

class Student:
    def __init__(self, name):
        self.name = name

class Classroom:
    def __init__(self):
        self.students = []
        self.quiz_grades = []
        self.quiz_averages = []

    def add_student(self, student):
        self.students.append(student)

    def add_quiz_grade(self, student_index, grade):
        if len(self.quiz_grades) <= student_index:
            self.quiz_grades.append([])
        self.quiz_grades[student_index].append(grade)

    def compute_quiz_averages(self):
        self.quiz_averages = []
        for grades in self.quiz_grades:
            if grades:
                average = sum(grades) / len(grades)
                self.quiz_averages.append(average)
            else:
                self.quiz_averages.append(0)

    def get_student_names(self):
        return [student.name for student in self.students]

    def get_student_grades(self, student_index):
        return self.quiz_grades[student_index]

    def get_class_average(self):
        if self.quiz_averages:
            return sum(self.quiz_averages) / len(self.quiz_averages)
        else:
            return 0

classroom = Classroom()

def add_student():
    name = student_entry.get()
    if name.isalpha():
        classroom.add_student(Student(name))
        student_entry.delete(0, tk.END)
        update_students_listbox()
    else:
        messagebox.showinfo("Error", "Please enter a valid student name (letters only).")

def add_quiz_grade():
    selected_student_index = students_listbox.curselection()
    if selected_student_index:
        try:
            student_index = selected_student_index[0]
            if 0 <= student_index < len(classroom.students):
                grade = int(quiz_grade_entry.get())
                classroom.add_quiz_grade(student_index, grade)
                quiz_grade_entry.delete(0, tk.END)
                update_quiz_grades_listbox(student_index)
            else:
                messagebox.showinfo("Error", "Invalid student index.")
        except ValueError:
            messagebox.showinfo("Error", "Please enter a valid numeric grade.")
    else:
        messagebox.showinfo("Error", "Please select a student before adding a quiz grade.")

def student_averages():
    classroom.compute_quiz_averages()
    update_class_averages_listbox()

def on_student_select(event):
    selected_student_index = students_listbox.curselection()
    if selected_student_index:
        student_index = selected_student_index[0]
        update_quiz_grades_listbox(student_index)

def update_students_listbox():
    students_listbox.delete(0, tk.END)
    students_listbox.insert(tk.END, *classroom.get_student_names())

def update_quiz_grades_listbox(student_index):
    grades = classroom.get_student_grades(student_index)
    quiz_grades_listbox.delete(0, tk.END)
    quiz_grades_listbox.insert(tk.END, *grades)

def update_class_averages_listbox():
    class_averages_listbox.delete(0, tk.END)
    for student, average in zip(classroom.get_student_names(), classroom.quiz_averages):
        class_averages_listbox.insert(tk.END, f"{student} - Average: {average:.2f}")

    # Add class average
    class_average = classroom.get_class_average()
    class_averages_listbox.insert(tk.END, f"Class Average: {class_average:.2f}")

root = tk.Tk()
root.title("Classroom Quiz Grades")

# Set background color to light pink
root.configure(bg='#FFB6C1')  # Hex color code for light pink

# Create a frame for centering
center_frame = tk.Frame(root, bg='#FFB6C1')  # Use the same background color
center_frame.pack(expand=True, fill='both')

student_entry = tk.Entry(center_frame, font=cartoon_font)
student_entry.grid(row=0, column=0, padx=5, pady=5)

add_student_button = tk.Button(center_frame, text="Add Student", command=add_student, font=cartoon_font, height=1)
add_student_button.grid(row=0, column=1, padx=5, pady=5, sticky="e")

students_listbox = tk.Listbox(center_frame, height=7, width=25, font=cartoon_font)
students_listbox.grid(row=1, column=0, padx=5, pady=5)

# Bind the event to the students_listbox
students_listbox.bind("<<ListboxSelect>>", on_student_select)

quiz_grade_entry = tk.Entry(center_frame, font=cartoon_font)
quiz_grade_entry.grid(row=2, column=0, padx=5, pady=5)

add_quiz_grade_button = tk.Button(center_frame, text="Add Quiz Grade", command=add_quiz_grade, font=cartoon_font, height=1)
add_quiz_grade_button.grid(row=2, column=1, padx=5, pady=5, sticky="e")

quiz_grades_listbox = tk.Listbox(center_frame, height=7, width=25, font=cartoon_font)
quiz_grades_listbox.grid(row=3, column=0, padx=5, pady=5 )

# Move to the right side
right_frame = tk.Frame(root, bg='#FFB6C1')
right_frame.pack(expand=True, fill='both')

compute_averages_button = tk.Button(right_frame, text="Student and Class Average", command=student_averages, font=cartoon_font, height=1)
compute_averages_button.grid(row=4, column=0, padx=10, pady=10, sticky="e")

class_averages_listbox = tk.Listbox(right_frame, height=15, width=25, font=cartoon_font)
class_averages_listbox.grid(row=5, column=0, padx=5, pady=5)

root.mainloop()

=====================================================================
3. 


import tkinter as tk


def encryption():
    plaintext = input.get()
    ciphertext = ""
    for char in plaintext:
        if char.isalpha():
            ascii_offset = ord('a') if char.islower() else ord('A')
            ciphertext += chr((ord(char) - ascii_offset + 1) % 26 + ascii_offset)
        else:
            ciphertext += char
    output.config(state=tk.NORMAL)
    output.delete(1.0, tk.END)
    output.insert(tk.END, ciphertext)
    output.config(state=tk.DISABLED)


root = tk.Tk()
root.configure(bg='gold')
root.title("Group 3's Encryption Tool")

# Create header
header = tk.Label(root, text="Encryption Tool", fg='#212121', bg='gold', font=('Fixedsys', 40))
header.pack()

# Create separator line
separator = tk.Frame(root, height=2, bg='#212121')
separator.pack(fill=tk.X, pady=5)

# Create labels and entry widget
label1 = tk.Label(root, text="Input text:", fg='#212121', bg='#F2F2F2', font=('FixedSys', 20))
label1.pack()

input = tk.Entry(root, width=50, borderwidth=3, fg='#212121', bg='#F2F2F2', font=('FixedSys', 20))
input.pack(padx=10, pady=10)

# Create button and output widget
button = tk.Button(root, text="Encrypt", borderwidth=5, command=encryption, fg='#212121', bg='#F2F2F2',
                   font=['FixedSys', 25])
button.pack(padx=10, pady=10)

label2 = tk.Label(root, text="Ciphered input:", fg='#212121', bg='#F2F2F2', font=('FixedSys', 20))
label2.pack()

output = tk.Text(root, height=10, width=50, borderwidth=5, state=tk.DISABLED, fg='#212121', bg='#F2F2F2',
                 font=['FixedSys', 20])
output.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

root.mainloop()

=====================================================================

4.

import tkinter as tk
from tkinter import messagebox, simpledialog
from tkinter import ttk

class InventoryGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Inventory Management")
        self.root.geometry("400x300")  # Set initial window size

        self.style = ttk.Style()
        self.style.configure("Custom.TButton", font=("Helvetica", 12), background="#007bff", foreground="black", bordercolor="#007bff", highlightthickness=0)
        self.style.map("Custom.TButton", background=[("active", "#0056b3"), ("disabled", "#bfbfbf")])  # Hover color, Disabled color
        self.style.map("Custom.TButton", foreground=[("disabled", "#595959")])  # Disabled text color
        self.style.configure("Custom.TFrame", background="#cdf2ff")  # Custom background color

        self.inventory = {
            "motherboard": 0,
            "hard_disk": 0,
            "diskette": 0,
            "compact_disk": 0,
            "memory_card": 0
        }

        self.create_widgets()

    def create_widgets(self):
        # Main frame with custom background
        main_frame = ttk.Frame(self.root, style="Custom.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # Title
        self.title_label = tk.Label(main_frame, text="Inventory Management", font=("Helvetica", 16, "bold"),bg="#cdf2ff")
        self.title_label.pack(pady=10)

        # Display Inventory button
        self.display_button = ttk.Button(main_frame, text="Display Inventory", command=self.display_inventory, style="Custom.TButton")
        self.display_button.pack(pady=5)

        # Add Items button
        self.add_button = ttk.Button(main_frame, text="Add Items", command=self.add_items, style="Custom.TButton")
        self.add_button.pack(pady=5)

        # Remove Items button
        self.remove_button = ttk.Button(main_frame, text="Remove Items", command=self.remove_items, style="Custom.TButton")
        self.remove_button.pack(pady=5)

        # Quit button
        self.quit_button = ttk.Button(main_frame, text="Quit", command=self.root.destroy, style="Custom.TButton")
        self.quit_button.pack(pady=5)

    def display_inventory(self):
        inventory_text = "Current Inventory:\n"
        for item, quantity in self.inventory.items():
            inventory_text += f"{item.capitalize()}: {quantity}\n"

        # Create a custom-styled messagebox
        inventory_window = tk.Toplevel(self.root)
        inventory_window.title("Current Inventory")
        inventory_window.geometry("300x200")
        inventory_window.configure(bg="#cdf2ff")  # Set background color

        # Create a label to display inventory text
        inventory_label = tk.Label(inventory_window, text=inventory_text, font=("Helvetica", 12), bg="#cdf2ff")
        inventory_label.pack(padx=20, pady=20)

    def add_items(self):
        item = simpledialog.askstring("Add Items", "Enter item to add:")
        if item:
            item = item.lower()
            if item in self.inventory:
                quantity = simpledialog.askinteger("Add Items", "Enter quantity to add:")
                if quantity is not None and quantity > 0:
                    self.inventory[item] += quantity
                    self.root.lift()  # Bring the main window to the front
                    messagebox.showinfo("Success", f"Added {quantity} {item.capitalize()}(s) to inventory.")
                else:
                    self.root.lift()  # Bring the main window to the front
                    messagebox.showerror("Error", "Invalid quantity.")
            else:
                self.root.lift()  # Bring the main window to the front
                messagebox.showerror("Error", "Invalid item.")

    def remove_items(self):
        item = simpledialog.askstring("Remove Items", "Enter item to remove:")
        if item:
            item = item.lower()
            if item in self.inventory:
                quantity = simpledialog.askinteger("Remove Items", "Enter quantity to remove:")
                if quantity is not None and quantity > 0:
                    if self.inventory[item] >= quantity:
                        self.inventory[item] -= quantity
                        self.root.lift()  # Bring the main window to the front
                        messagebox.showinfo("Success", f"Removed {quantity} {item.capitalize()}(s) from inventory.")
                    else:
                        self.root.lift()  # Bring the main window to the front
                        messagebox.showerror("Error", "Insufficient quantity in inventory.")
                else:
                    self.root.lift()  # Bring the main window to the front
                    messagebox.showerror("Error", "Invalid quantity.")
            else:
                self.root.lift()  # Bring the main window to the front
                messagebox.showerror("Error", "Invalid item.")

def main():
    root = tk.Tk()
    app = InventoryGUI(root)
    root.mainloop()

if _name_ == "_main_":
    main()
=====================================================================
5.

import tkinter as tk
from tkinter import messagebox

def AddContact():
    name = NameEntry.get()
    phone = PhoneEntry.get()
    if name and phone:
        if phone.isdigit():
            if any(contact_phone == phone for contact_phone in contacts.values()):
                messagebox.showerror("ERROR", "The phone number you entered already exists.")
            else:
                contacts[name] = phone
                UpdateDisplay()
        else:
            messagebox.showerror("ERROR", "Phone number must contain only digits.")
    else:
        messagebox.showerror("ERROR", "Please enter both name and phone number.")

def SearchContact():
    search_term = SearchEntry.get()
    if search_term in contacts:
        ResultLabel.config(text=f"Name: {search_term}, Phone Number: {contacts[search_term]}")
    else:
        ResultLabel.config(text="Contact cannot be found")

def DeleteContact():
    name = NameEntry.get()
    phone = PhoneEntry.get()
    if name and phone:
        if (name, phone) in contacts.items():
            confirm = messagebox.askyesno("Confirm for Deletion", f"Are you sure you want to delete {name}?")
            if confirm:
                del contacts[name]
                UpdateDisplay()
        else:
            messagebox.showerror("ERROR", "Contact cannot be found")
    else:
        messagebox.showerror("ERROR", "Please enter both name and phone number.")

def UpdateContact():
    name = NameEntry.get()
    new_name = new_NameEntry.get()
    new_phone = new_PhoneEntry.get()

    if name not in contacts:
        messagebox.showerror("ERROR", "Contact cannot be found.")
        return

    while True:
        if not new_name and not new_phone:
            messagebox.showerror("ERROR", "Please enter new name or new phone number.")
            break

        if new_phone and not new_phone.isdigit():
            messagebox.showerror("ERROR", "New phone number must contain only digits.")
            break

        if any(new_phone == phone for phone in contacts.values()):
            messagebox.showerror("ERROR", "The phone number you inserted already exists in the phonebook.")
            break

        if new_name:
            contacts[new_name] = contacts.pop(name)
        if new_phone:
            contacts[new_name] = new_phone

        UpdateDisplay()
        messagebox.showinfo("SUCCESS", "Contact updated successfully.")
        break

def UpdateDisplay():
    contactListBox.delete(0, tk.END)
    for name, phone in contacts.items():
        contactListBox.insert(tk.END, f"{name}: {phone}")

contacts = {}

root = tk.Tk()
root.title("Group 3's Phonebook")
root.geometry("400x300")

cool_font = ("Verdana", 10, "bold")
header_font = ("Fixedsys", 20, "bold")
result_font = ("Verdana", 10)

root.config(bg="skyblue")

HeaderLabel = tk.Label(root, text="GROUP 3'S PHONEBOOK", font=header_font, bg="skyblue", fg="black")
HeaderLabel.grid(row=0, column=0, columnspan=4, pady=10)

SearchEntry = tk.Entry(root, width=29, font=cool_font)
SearchEntry.grid(row=1, column=1, pady=5, sticky="w")
SearchButton = tk.Button(root, text="Search", command=SearchContact, font=cool_font)
SearchButton.grid(row=1, column=2)
tk.Label(root, text="Name:", font=cool_font, bg="skyblue", fg="black").grid(row=3, column=0, sticky="e")
tk.Label(root, text="Phone Number:", font=cool_font, bg="skyblue", fg="black").grid(row=4, column=0, sticky="e")
tk.Label(root, text="Search:", font=cool_font, bg="skyblue", fg="black").grid(row=1, column=0, sticky="e")
ResultLabel = tk.Label(root, text="", font=result_font, bg="skyblue", fg="black")
ResultLabel.grid(row=2, columnspan=4)

NameEntry = tk.Entry(root, width=30, font=cool_font)
NameEntry.grid(row=3, column=1)
PhoneEntry = tk.Entry(root, width=30, font=cool_font)
PhoneEntry.grid(row=4, column=1)
PhoneEntry.config(validate="key")
PhoneEntry.config(validatecommand=(root.register(lambda char: char.isdigit() or char == ''), '%S'))

AddButton = tk.Button(root, text="Add Contact", command=AddContact, font=cool_font)
AddButton.grid(row=5, column=1, pady=5, sticky="w", padx=5)
DeleteButton = tk.Button(root, text="Delete Contact", command=DeleteContact, font=cool_font)
DeleteButton.grid(row=5, column=1, pady=5, padx=5, sticky="e")

tk.Label(root, text="New Name:", font=cool_font, bg="skyblue", fg="black").grid(row=6, column=0, sticky="e")
tk.Label(root, text="New Phone Number:", font=cool_font, bg="skyblue", fg="black").grid(row=7, column=0, sticky="e")
new_NameEntry = tk.Entry(root, width=30, font=cool_font)
new_NameEntry.grid(row=6, column=1, sticky="w")
new_PhoneEntry = tk.Entry(root, width=30, font=cool_font)
new_PhoneEntry.grid(row=7, column=1, sticky="w")

UpdateButton = tk.Button(root, text="Update Contact", command=UpdateContact, font=cool_font)
UpdateButton.grid(row=8, column=1, columnspan=1, pady=5)

contactListBox = tk.Listbox(root, width=40, height=8, font=cool_font)
contactListBox.grid(row=9, columnspan=5, pady=5)

root.mainloop()


